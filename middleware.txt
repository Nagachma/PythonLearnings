

1)middleware are hoocks to django ,this will execute before and after the request

2)this middleware has 2 mandatory(__init__,__call__) and 3 optional methods(process_view,process_exception,process_template_response) 

def __init__(self,get_response):
	self.get_response = get_response
	
def __call__(self,request):
	response = self.get_response(request)
3)example

i)create middleware.py

class AppMaintanancemiddleware(object):
	def __init__(self,get_response):
		self.get_response = get_response
	def __call__(self,request):
		return Httpresponse('<h2>Currently application is under maintenence</h2>')
ii)settings.py

MIDDLEWARE = [
	"appname.middleware.AppMaintanance"
]

iii)create view

def home_page_view(request):
	return HttpResponse('<h1>hello this is home page<h1>')
4)example

Class Errormessgaemiddleware(object):
	def __init__(self,get_response):
		self.get_response = get_response

	def __call__(self,request):
		return self.get_response(request)
	def process_exception(self,request,exception):
		return Exception('<h2>this currently we are facing some technical issue<h2>')
MIDDLEWARE = [
"appname.middleware.Errormessgaemiddleware"
 ]	


